# prompt: Develop a simple Weather Station application using a programming language and framework of your choice. The application should include basic functionality, such as data collection, data storage, data transmission, data analysis, and a user interface.

# This code provides a basic structure for a weather station application.
# It uses Python with Pandas and a simulated data source.
# For a real-world application, you'd replace the simulated data with
# readings from sensors and a database with a persistent storage solution.

import pandas as pd
import time
import random

# Simulated sensor readings
def get_sensor_data():
    temperature = random.uniform(20, 30)  # Celsius
    humidity = random.uniform(40, 80)    # Percentage
    pressure = random.uniform(980, 1030) # hPa
    wind_speed = random.uniform(0, 20)    # m/s
    return temperature, humidity, pressure, wind_speed

# Data storage (in-memory for this example)
weather_data = []

# Data collection loop
def collect_data(duration_seconds=60):  # Collect data for 60 seconds
    start_time = time.time()
    while time.time() - start_time < duration_seconds:
        temperature, humidity, pressure, wind_speed = get_sensor_data()
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        weather_data.append([timestamp, temperature, humidity, pressure, wind_speed])
        time.sleep(1)  # Sample every 1 second

# Data transmission (simulated)
def transmit_data(data):
    print("Transmitting data...")
    # In a real application, you'd send this data to a server, cloud service, etc.
    print(data)


# Data analysis (example: calculate average temperature)
def analyze_data(data):
    df = pd.DataFrame(data, columns=["Timestamp", "Temperature", "Humidity", "Pressure", "Wind Speed"])
    average_temp = df['Temperature'].mean()
    print(f"Average Temperature: {average_temp:.2f}Â°C")
    # Add other analyses (e.g., min/max, trends)


# User interface (simulated)
def display_data(data):
    print("Weather Data:")
    df = pd.DataFrame(data, columns=["Timestamp", "Temperature", "Humidity", "Pressure", "Wind Speed"])
    print(df)


# Main application
if __name__ == "__main__":
    collect_data() # Start collecting data for 60 seconds
    transmit_data(weather_data)
    analyze_data(weather_data)
    display_data(weather_data)
